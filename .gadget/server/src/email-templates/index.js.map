{"version":3,"sources":["/app/packages/framework/src/email-templates/index.ts"],"sourcesContent":["import { Globals } from \"../globals\";\nimport { RESET_PASSWORD_TEMPLATE } from \"./reset-password\";\nimport { VERIFY_EMAIL_TEMPLATE } from \"./verify-email\";\nimport { Config } from \"../AppConfigs\";\nimport { emails } from \"../emails\";\nimport { GlobalNotSetError } from \"../errors\";\n\ninterface templateData {\n  app_name?: string;\n  url: string;\n}\n\n/**\n * Renders an email template using EJS.\n * @param {string} template - The EJS template content\n * @param {object} data - The data to be passed to the template\n * @returns {string} - The rendered email template\n */\nexport const renderEmailTemplate = (template: string, data: Record<string, any>) => {\n  if (!emails) {\n    throw new GlobalNotSetError(\"emails is not yet defined\");\n  }\n\n  try {\n    return emails.render(template, data);\n  } catch (error) {\n    Globals.logger.error({ error, name: \"emails\" }, \"An error occurred rendering your EJS email template\");\n    throw error;\n  }\n};\n\n/**\n * Renders the \"Verify Email\" template.\n * * @param {templateData} data - The data used to render the template.\n * @param {string} [data.app_name] - The name of your app, defaults to Config.appName (optional)\n * @param {string} data.url - The url for the user to verify their account.\n * @returns {string} - The rendered html of the email template\n */\nexport const renderVerifyEmailTemplate = (data: templateData) => {\n  if (!Config.appName && !data.app_name) {\n    throw new GlobalNotSetError(\"Config.appName is not yet defined\");\n  }\n\n  const url = data.url;\n  const app_name = data.app_name ?? Config.appName;\n  return renderEmailTemplate(VERIFY_EMAIL_TEMPLATE, { app_name, url });\n};\n\n/**\n * Renders the \"Reset Password\" template.\n * @param {templateData} data - The data used to render the template.\n * @param {string} [data.app_name] - The name of your app. If not provided, it defaults to Config.appName.\n * @param {string} data.url - The url for the user to reset their password.\n * @returns {string} - The rendered html of the email template.\n */\nexport const renderResetPasswordTemplate = (data: templateData) => {\n  if (!Config.appName && !data.app_name) {\n    throw new GlobalNotSetError(\"Config.appName is not yet defined\");\n  }\n\n  const url = data.url;\n  const app_name = data.app_name ?? Config.appName;\n  return renderEmailTemplate(RESET_PASSWORD_TEMPLATE, { app_name, url });\n};\n"],"names":["renderEmailTemplate","renderVerifyEmailTemplate","renderResetPasswordTemplate","template","data","emails","GlobalNotSetError","render","error","Globals","logger","name","Config","appName","app_name","url","VERIFY_EMAIL_TEMPLATE","RESET_PASSWORD_TEMPLATE"],"mappings":";;;;;;;;;;;IAkBaA,mBAAmB;eAAnBA;;IAoBAC,yBAAyB;eAAzBA;;IAiBAC,2BAA2B;eAA3BA;;;yBAvDW;+BACgB;6BACF;4BACf;wBACA;wBACW;AAa3B,MAAMF,sBAAsB,CAACG,UAAkBC;IACpD,IAAI,CAACC,cAAM,EAAE;QACX,MAAM,IAAIC,yBAAiB,CAAC;IAC9B;IAEA,IAAI;QACF,OAAOD,cAAM,CAACE,MAAM,CAACJ,UAAUC;IACjC,EAAE,OAAOI,OAAO;QACdC,gBAAO,CAACC,MAAM,CAACF,KAAK,CAAC;YAAEA;YAAOG,MAAM;QAAS,GAAG;QAChD,MAAMH;IACR;AACF;AASO,MAAMP,4BAA4B,CAACG;IACxC,IAAI,CAACQ,kBAAM,CAACC,OAAO,IAAI,CAACT,KAAKU,QAAQ,EAAE;QACrC,MAAM,IAAIR,yBAAiB,CAAC;IAC9B;IAEA,MAAMS,MAAMX,KAAKW,GAAG;IACpB,MAAMD,WAAWV,KAAKU,QAAQ,IAAIF,kBAAM,CAACC,OAAO;IAChD,OAAOb,oBAAoBgB,kCAAqB,EAAE;QAAEF;QAAUC;IAAI;AACpE;AASO,MAAMb,8BAA8B,CAACE;IAC1C,IAAI,CAACQ,kBAAM,CAACC,OAAO,IAAI,CAACT,KAAKU,QAAQ,EAAE;QACrC,MAAM,IAAIR,yBAAiB,CAAC;IAC9B;IAEA,MAAMS,MAAMX,KAAKW,GAAG;IACpB,MAAMD,WAAWV,KAAKU,QAAQ,IAAIF,kBAAM,CAACC,OAAO;IAChD,OAAOb,oBAAoBiB,sCAAuB,EAAE;QAAEH;QAAUC;IAAI;AACtE"}