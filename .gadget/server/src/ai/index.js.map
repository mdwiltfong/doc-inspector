{"version":3,"sources":["/app/packages/framework/src/ai/index.ts"],"sourcesContent":["import { Readable, type ReadableOptions } from \"stream\";\n\nclass OpenAIResponseStream extends Readable {\n  readonly openAIIterable: AsyncIterable<any>;\n  reading: boolean;\n  result: string;\n  responseContentType = \"application/octet-stream\";\n\n  constructor(openAIIterable: AsyncIterable<any>, options: ReadableOptions = {}) {\n    super(options);\n    this.openAIIterable = openAIIterable;\n    this.reading = false;\n    this.result = \"\";\n  }\n\n  processChunk(): (chunk: any) => string | undefined {\n    let isFunctionStreaming: boolean;\n\n    return (json) => {\n      if (json.choices[0]?.delta?.function_call?.name) {\n        isFunctionStreaming = true;\n        return `{\"function_call\": {\"name\": \"${json.choices[0]?.delta?.function_call.name}\", \"arguments\": \"`;\n      }\n\n      if (json.choices[0]?.delta?.function_call?.arguments) {\n        const argumentChunk: string = json.choices[0].delta.function_call.arguments;\n\n        const escapedPartialJson = argumentChunk\n          .replace(/\\\\/g, \"\\\\\\\\\") // Replace backslashes first to prevent double escaping\n          .replace(/\\//g, \"\\\\/\") // Escape slashes\n          .replace(/\"/g, '\\\\\"') // Escape double quotes\n          .replace(/\\n/g, \"\\\\n\") // Escape new lines\n          .replace(/\\r/g, \"\\\\r\") // Escape carriage returns\n          .replace(/\\t/g, \"\\\\t\") // Escape tabs\n          .replace(/\\f/g, \"\\\\f\"); // Escape form feeds\n\n        return `${escapedPartialJson}`;\n      }\n\n      if (isFunctionStreaming && (json.choices[0]?.finish_reason === \"function_call\" || json.choices[0]?.finish_reason === \"stop\")) {\n        isFunctionStreaming = false;\n        return '\"}}';\n      }\n\n      return json.choices?.[0]?.delta?.content ?? json.choices?.[0]?.text;\n    };\n  }\n\n  async _read() {\n    if (this.reading) return;\n    this.reading = true;\n    const process = this.processChunk();\n\n    try {\n      for await (const part of this.openAIIterable) {\n        const content = process(part);\n        if (content) {\n          this.result += content;\n          this.push(content);\n        }\n      }\n\n      this.push(null);\n      this.reading = false;\n    } catch (err) {\n      this.emit(\"error\", err);\n    }\n  }\n}\n\n/**\n * Represents options for the OpenAI response stream.\n */\nexport interface OpenAIResponseStreamOptions {\n  /**\n   * A callback function that will be invoked when the OpenAI response stream is complete.\n   * @param {string} content - The full output of the LLM response.\n   */\n  onComplete?: (content: string) => void;\n}\n\n/**\n * Converts the result of calling openai with `stream: true` into a readable stream that\n * Fasitfy can respond with.\n *\n *\n * @param {AsyncIterable<any>} stream - An AsyncIterable containing OpenAI response parts.\n * @param {OpenAIResponseStreamOptions} options - Options for the OpenAI response stream.\n * @returns {Readable} A Readable stream with the transformed content from the input stream.\n *\n *\n * @example\n * // Using the openAIResponseStream function to convert an AsyncIterable into a Readable stream\n * const stream = await connections.openai.chat.completions.create({\n *   model: \"gpt-3.5-turbo\",\n *   messages: [{ role: \"user\", content: \"Hello!\" }],\n *   stream: true,\n * });\n * await reply.send(openAIResponseStream(stream, {\n *  onComplete: (content) => { console.log(content) }\n * }));\n *\n * @see {@link https://github.com/openai/openai-node} - OpenAI Node.js client library.\n * @see {@link https://docs.gadget.dev/guides/http-routes/route-configuration#sending-responses} - Sending responses in Gadget.\n */\nexport function openAIResponseStream(openAIIterable: AsyncIterable<any>, options: OpenAIResponseStreamOptions = {}): Readable {\n  const stream = new OpenAIResponseStream(openAIIterable);\n\n  stream.on(\"end\", () => {\n    if (options.onComplete) options.onComplete(stream.result);\n  });\n\n  return stream;\n}\n"],"names":["openAIResponseStream","OpenAIResponseStream","Readable","openAIIterable","reading","result","responseContentType","constructor","options","processChunk","isFunctionStreaming","json","choices","delta","function_call","name","arguments","argumentChunk","escapedPartialJson","replace","finish_reason","content","text","_read","process","part","push","err","emit","stream","on","onComplete"],"mappings":";;;;+BAyGgBA;;;eAAAA;;;;yBAzG+B;;;;;;AAE/C,MAAMC,6BAA6BC,kBAAQ;IAChCC,eAAmC;IAC5CC,QAAiB;IACjBC,OAAe;IACfC,sBAAsB,2BAA2B;IAEjDC,YAAYJ,cAAkC,EAAEK,UAA2B,CAAC,CAAC,CAAE;QAC7E,KAAK,CAACA;QACN,IAAI,CAACL,cAAc,GAAGA;QACtB,IAAI,CAACC,OAAO,GAAG;QACf,IAAI,CAACC,MAAM,GAAG;IAChB;IAEAI,eAAmD;QACjD,IAAIC;QAEJ,OAAO,CAACC;YACN,IAAIA,KAAKC,OAAO,CAAC,EAAE,EAAEC,OAAOC,eAAeC,MAAM;gBAC/CL,sBAAsB;gBACtB,OAAO,CAAC,4BAA4B,EAAEC,KAAKC,OAAO,CAAC,EAAE,EAAEC,OAAOC,cAAcC,KAAK,iBAAiB,CAAC;YACrG;YAEA,IAAIJ,KAAKC,OAAO,CAAC,EAAE,EAAEC,OAAOC,eAAeE,WAAW;gBACpD,MAAMC,gBAAwBN,KAAKC,OAAO,CAAC,EAAE,CAACC,KAAK,CAACC,aAAa,CAACE,SAAS;gBAE3E,MAAME,qBAAqBD,cACxBE,OAAO,CAAC,OAAO,QAAQ,uDAAuD;iBAC9EA,OAAO,CAAC,OAAO,OAAO,iBAAiB;iBACvCA,OAAO,CAAC,MAAM,OAAO,uBAAuB;iBAC5CA,OAAO,CAAC,OAAO,OAAO,mBAAmB;iBACzCA,OAAO,CAAC,OAAO,OAAO,0BAA0B;iBAChDA,OAAO,CAAC,OAAO,OAAO,cAAc;iBACpCA,OAAO,CAAC,OAAO,QAAQ,oBAAoB;gBAE9C,OAAO,CAAC,EAAED,mBAAmB,CAAC;YAChC;YAEA,IAAIR,uBAAwBC,CAAAA,KAAKC,OAAO,CAAC,EAAE,EAAEQ,kBAAkB,mBAAmBT,KAAKC,OAAO,CAAC,EAAE,EAAEQ,kBAAkB,MAAK,GAAI;gBAC5HV,sBAAsB;gBACtB,OAAO;YACT;YAEA,OAAOC,KAAKC,OAAO,EAAE,CAAC,EAAE,EAAEC,OAAOQ,WAAWV,KAAKC,OAAO,EAAE,CAAC,EAAE,EAAEU;QACjE;IACF;IAEA,MAAMC,QAAQ;QACZ,IAAI,IAAI,CAACnB,OAAO,EAAE;QAClB,IAAI,CAACA,OAAO,GAAG;QACf,MAAMoB,UAAU,IAAI,CAACf,YAAY;QAEjC,IAAI;YACF,WAAW,MAAMgB,QAAQ,IAAI,CAACtB,cAAc,CAAE;gBAC5C,MAAMkB,UAAUG,QAAQC;gBACxB,IAAIJ,SAAS;oBACX,IAAI,CAAChB,MAAM,IAAIgB;oBACf,IAAI,CAACK,IAAI,CAACL;gBACZ;YACF;YAEA,IAAI,CAACK,IAAI,CAAC;YACV,IAAI,CAACtB,OAAO,GAAG;QACjB,EAAE,OAAOuB,KAAK;YACZ,IAAI,CAACC,IAAI,CAAC,SAASD;QACrB;IACF;AACF;AAqCO,SAAS3B,qBAAqBG,cAAkC,EAAEK,UAAuC,CAAC,CAAC;IAChH,MAAMqB,SAAS,IAAI5B,qBAAqBE;IAExC0B,OAAOC,EAAE,CAAC,OAAO;QACf,IAAItB,QAAQuB,UAAU,EAAEvB,QAAQuB,UAAU,CAACF,OAAOxB,MAAM;IAC1D;IAEA,OAAOwB;AACT"}