{"version":3,"sources":["/app/packages/framework/src/globals.ts"],"sourcesContent":["import type { RequestContext } from \"@fastify/request-context\";\nimport { AsyncLocalStorage } from \"async_hooks\";\nimport type { Logger } from \"./AmbientContext\";\nimport type { AnyActionContext, AnyAmbientContext, AnyEffectContext, AnyGlobalActionContext } from \"./types\";\n\nexport const actionContextLocalStorage = new AsyncLocalStorage<AnyActionContext | AnyGlobalActionContext | AnyEffectContext>();\n\n/**\n * Extend the @fastify/request-context types with Gadget's added reference to the current unit of work's context\n * See https://github.com/fastify/fastify-request-context#typescript\n * */\ndeclare module \"@fastify/request-context\" {\n  interface RequestContextData {\n    requestContext: AnyAmbientContext | AnyActionContext | AnyGlobalActionContext | AnyEffectContext;\n  }\n}\n\nconst platformModuleRequirer = <T = any>(name: string) => {\n  let mod: T = null as any;\n  return () => {\n    if (!mod) {\n      if (!Globals.platformRequire) throw new Error(\"Globals.platformRequire is not set, has it been injected by the sandbox yet?\");\n      mod = Globals.platformRequire(name);\n    }\n    return mod;\n  };\n};\n\nexport const Globals = {\n  /**\n   * Internal variable to store the model validator function, set in `set` by the `AppBridge`.\n   * @internal\n   */\n  modelValidator: null as any as (modelKey: string) => Promise<any>,\n\n  /**\n   * Internal variable to store the request context module, set in `set` by the `AppBridge`.\n   * @internal\n   */\n  requestContext: null as any as RequestContext,\n\n  /**\n   * @internal\n   */\n  logger: null as any as Logger,\n\n  /**\n   * Require function for importing code from the gadget platform context instead of the app's context.\n   * @internal\n   */\n  platformRequire: null as any as typeof require,\n\n  /**\n   * This is used internally to set the globals for this instance of the framework package.\n   * @internal\n   */\n  set(globals: {\n    logger: Logger;\n    modelValidator: (modelKey: string) => Promise<any>;\n    requestContext: RequestContext;\n    platformRequire: typeof require;\n  }) {\n    Object.assign(this, globals);\n  },\n\n  /**\n   * Lazy-loaded modules for use in the framework package from the gadget platform context.\n   * @internal\n   */\n  platformModules: {\n    lodash: platformModuleRequirer(\"lodash\"),\n    bcrypt: platformModuleRequirer(\"bcrypt\"),\n  },\n};\n"],"names":["actionContextLocalStorage","Globals","AsyncLocalStorage","platformModuleRequirer","name","mod","platformRequire","Error","modelValidator","requestContext","logger","set","globals","Object","assign","platformModules","lodash","bcrypt"],"mappings":";;;;;;;;;;;IAKaA,yBAAyB;eAAzBA;;IAuBAC,OAAO;eAAPA;;;;yBA3BqB;;;;;;AAI3B,MAAMD,4BAA4B,IAAIE,CAAAA,cAAgB,mBAAC;AAY9D,MAAMC,yBAAyB,CAAUC;IACvC,IAAIC,MAAS;IACb,OAAO;QACL,IAAI,CAACA,KAAK;YACR,IAAI,CAACJ,QAAQK,eAAe,EAAE,MAAM,IAAIC,MAAM;YAC9CF,MAAMJ,QAAQK,eAAe,CAACF;QAChC;QACA,OAAOC;IACT;AACF;AAEO,MAAMJ,UAAU;IACrB;;;GAGC,GACDO,gBAAgB;IAEhB;;;GAGC,GACDC,gBAAgB;IAEhB;;GAEC,GACDC,QAAQ;IAER;;;GAGC,GACDJ,iBAAiB;IAEjB;;;GAGC,GACDK,KAAIC,OAKH;QACCC,OAAOC,MAAM,CAAC,IAAI,EAAEF;IACtB;IAEA;;;GAGC,GACDG,iBAAiB;QACfC,QAAQb,uBAAuB;QAC/Bc,QAAQd,uBAAuB;IACjC;AACF"}